{"version":3,"sources":["component/Form.js","component/Appo.js","App.js","index.js"],"names":["Form","createAppo","useState","pet","owner","date","time","symptoms","appo","updateAppo","error","updateError","updateState","e","target","name","value","data-testid","className","onSubmit","preventDefault","trim","id","uuid","console","log","type","placeholder","onChange","Appo","deleteAppo","onClick","App","initialAppos","JSON","parse","localStorage","getItem","allAppos","saveAppos","useEffect","setItem","stringify","newAppos","filter","title","length","map","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.73ab9a54.chunk.js","sourcesContent":["import React, { Fragment, useState } from \"react\";\nimport uuid from \"uuid/dist/v4\"; //for generate uniques ID\nimport PropTypes from \"prop-types\";\n\n//destructuring on props object to extract createAppo\nconst Form = ({ createAppo }) => {\n  //appointment aka Appo hook, State,is an object the use \"({})\n  const [appo, updateAppo] = useState({\n    pet: \"\",\n    owner: \"\",\n    date: \"\",\n    time: \"\",\n    symptoms: \"\",\n  });\n\n  const [error, updateError] = useState(false); //is a bool this hook use only \"()\"\n\n  //the user enters data in a form field\n  const updateState = (e) => {\n    //the function to acces and update the appo State\n    updateAppo({\n      ...appo, //copy of appo state\n      [e.target.name]: e.target.value, //mapping form field whit user typing  input data\n    });\n  };\n\n  //user click the submit form button\n  const submitAppo = (e) => {\n    e.preventDefault();\n    //to testing\n\n    //form validations\n    if (\n      pet.trim() === \"\" ||\n      owner.trim() === \"\" ||\n      date.trim() === \"\" ||\n      time.trim() === \"\" ||\n      symptoms.trim() === \"\"\n    ) {\n      updateError(true);\n      return;\n    }\n\n    //delete error msg when form valitation is correct\n    updateError(false);\n\n    //asigng and ID\n    appo.id = uuid();\n    console.log(appo);\n    //make the appo using the prop createAppo sent from App.js\n    createAppo(appo);\n    //rest the form\n    updateAppo({\n      pet: \"\",\n      owner: \"\",\n      date: \"\",\n      time: \"\",\n      symptoms: \"\",\n    });\n  };\n\n  //extracting input values from appo through destructuring\n  const { pet, owner, date, time, symptoms } = appo;\n\n  return (\n    <Fragment>\n      <h2 data-testid=\"title\">Make an Appointment</h2>\n\n      {error ? (\n        <p data-testid=\"alert\" className=\"alerta-error\">\n          All fields are mandatory\n        </p>\n      ) : null}\n      <form onSubmit={submitAppo}>\n        <label>Pet's Name</label>\n        <input\n          data-testid=\"pet\"\n          type=\"text\"\n          name=\"pet\"\n          className=\"u-full-width\" //input toma todo el espacio disponible\n          placeholder=\"Pet's Name\"\n          onChange={updateState}\n          value={pet}\n        />\n\n        <label>Owner's Name</label>\n        <input\n          data-testid=\"owner\"\n          type=\"text\"\n          name=\"owner\"\n          className=\"u-full-width\" //input toma todo el espacio disponible\n          placeholder=\"Owner's Name\"\n          onChange={updateState}\n          value={owner}\n        />\n\n        <label>Date</label>\n        <input\n          data-testid=\"date\"\n          type=\"date\"\n          name=\"date\"\n          className=\"u-full-width\"\n          onChange={updateState}\n          value={date}\n        />\n\n        <label>Time</label>\n        <input\n          data-testid=\"time\"\n          type=\"time\"\n          name=\"time\"\n          className=\"u-full-width\"\n          onChange={updateState}\n          value={time}\n        />\n        <label>Symptoms</label>\n        <textarea\n          data-testid=\"symptoms\"\n          className=\"u-full-width\"\n          name=\"symptoms\"\n          onChange={updateState}\n          value={symptoms}\n        ></textarea>\n\n        <button\n          data-testid=\"btn-submit\"\n          type=\"submit\"\n          className=\"u-full-width button-primary\"\n          onChange={updateState}\n        >\n          Send\n        </button>\n      </form>\n    </Fragment>\n  );\n};\n\n//using propTypes for documenting components\nForm.propTypes = {\n  createAppo: PropTypes.func.isRequired,\n};\n\nexport default Form;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst Appo = ({ appo, deleteAppo }) => (\n  <div data-testid=\"appointment\" className=\"appo\">\n    <p>\n      Pet: <span>{appo.pet}</span>\n    </p>\n    <p>\n      Owner: <span>{appo.owner}</span>\n    </p>\n    <p>\n      Date: <span>{appo.date}</span>\n    </p>\n    <p>\n      Time: <span>{appo.time}</span>\n    </p>\n    <p>\n      Symptoms: <span>{appo.symptoms}</span>\n    </p>\n\n    <button\n      data-testid=\"btn-delete\"\n      className=\"button eliminar u-full-width\"\n      onClick={() => deleteAppo(appo.id)}\n    >\n      Delete &times;\n    </button>\n  </div>\n);\n//documenting and type checking whit proptypes\nAppo.propTypes = {\n  appo: PropTypes.object.isRequired,\n  deleteAppo: PropTypes.func.isRequired,\n};\n\nexport default Appo;\n","import React, { Fragment, useState, useEffect } from \"react\";\nimport Form from \"./component/Form\";\nimport Appo from \"./component/Appo\";\n\nfunction App() {\n  //appointments aka appos in local storage\n  let initialAppos = JSON.parse(localStorage.getItem(\"allAppos\"));\n  if (!initialAppos) {\n    initialAppos = [];\n  }\n  console.log(initialAppos);\n  //list of all appointemts akka allAppos, initialAppos in LS is the initial state values of useState and for useEffect hooks\n  const [allAppos, saveAppos] = useState(initialAppos);\n\n  //useEffect hook alwys listen when state changes, and is used to make some ops, use empty [] to executes one time only\n  useEffect(() => {\n    let initialAppos = JSON.parse(localStorage.getItem(\"allAppos\"));\n\n    if (initialAppos) {\n      //if there is any appos in LS this appos will be the list of all appos\n      localStorage.setItem(\"allAppos\", JSON.stringify(allAppos));\n    } else {\n      localStorage.setItem(\"allAppos\", JSON.stringify([])); //if there is not appos in LS then the list of appos will be an empty array []\n    }\n  }, [allAppos]); //alppos is the dependency param where the changes in the state reflects\n\n  //function to take the actual list of appos and add a new one from form component in the Appo State\n  const createAppo = (appo) => {\n    //the function to acces and update the AllAppos State\n    saveAppos([...allAppos, appo]); //copy the list of all appos , adding the new appo in the appo State\n  };\n\n  //function to delete an appointment by id\n  const deleteAppo = (id) => {\n    //from appos list in \"your appointments\" (allAppos State) copy all in a new array, less the one whit the id equals to the appo for delete\n    const newAppos = allAppos.filter((appo) => appo.id !== id);\n    saveAppos(newAppos); //save th new list of appos in the State\n  };\n\n  //conditional msg\n  const title = allAppos.length === 0 ? \"No Appointments\" : \"Your Appointments\";\n  console.log(allAppos.length);\n\n  return (\n    <Fragment>\n      <h1 data-testid=\"title-app\">Pets Doctor Appointment</h1>\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Form createAppo={createAppo} />\n          </div>\n          <div className=\"one-half column\">\n            <h2 data-testid=\"conditional-title\">{title}</h2>\n            {allAppos.map((appo) => (\n              <Appo key={appo.id} appo={appo} deleteAppo={deleteAppo} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}